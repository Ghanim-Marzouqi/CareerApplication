@page "/"
@layout AuthLayout
@inject AuthProvider _auth
@inject DatabaseProvider _db
@inject NavigationManager _navigationManager
@inject IBrowserStorageService _browserService

<PageTitle>Career Application | Login</PageTitle>

<EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    @if (_alert.IsVisible)
    {
        <MudAlert Severity="_alert.AlertType">@(_alert.Message)</MudAlert>
    }
    <MudTextField 
        T="string" 
        @bind-Value="@_model.Email" 
        For="@(() => _model.Email)" 
        Label="Email" 
        Class="my-6" 
        Variant="Variant.Outlined" />
    <MudTextField 
        T="string" 
        @bind-Value="@_model.Password" 
        For="@(() => _model.Password)" 
        Label="Password"
        Class="my-6"
        InputType="@_passwordInput" 
        Variant="Variant.Outlined" 
        Adornment="Adornment.End"
        AdornmentIcon="@_passwordInputIcon" 
        OnAdornmentClick="TogglePasswordVisibility" />
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" Class="ml-n1 mt-3">
        @if (_isLoading)
        {
            <MudProgressCircular Color="Color.Tertiary" Size="Size.Small" Style="margin-left: 10px;" Indeterminate="true" />
        }
        else
        {
            @("Sign In")
        }
    </MudButton>
    <MudButton Link="/forgot-password" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" FullWidth="true" Class="ml-n1 my-3">
        Forgot Password
    </MudButton>
</EditForm>

@code {
    // Properties
    LoginModel _model = new();
    AlertModel _alert = new();
    bool _isLoading;
    bool _passwordVisibility;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    // Private Methods
    private void TogglePasswordVisibility()
    {
        if (_passwordVisibility)
        {
            _passwordVisibility = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _passwordVisibility = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private async void OnValidSubmit(EditContext context)
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var result = await _auth.SignInWithEmailAndPassword(_model.Email, _model.Password);

            if (result != null && result.User != null)
            {
                // Retieve user data from database
                Func<UserEntity, bool> predicate = (user) => user.Id == result.User.LocalId;
                Func<FirebaseObject<UserEntity>, UserEntity> selector = (user) =>
                    new UserEntity
                    {
                        Id = user.Object.Id,
                        RoleId = user.Object.RoleId,
                        Name = user.Object.Name,
                        Email = user.Object.Email,
                        Phone = user.Object.Phone,
                        IsActive = user.Object.IsActive,
                        CreatedBy = user.Object.CreatedBy,
                        CreatedAt = user.Object.CreatedAt,
                        UpdatedBy = user.Object.UpdatedBy,
                        UpdatedAt = user.Object.UpdatedAt
                    };

                var loggedInUser = await _db.GetById<UserEntity>(UserEntity.Node, predicate, selector);

                if (loggedInUser == null)
                {
                    _isLoading = false;
                    _alert.IsVisible = true;
                    _alert.Message = "User data not found";
                    _alert.AlertType = Severity.Error;
                    StateHasChanged();
                    return;
                }

                await _browserService.SetItem("user", loggedInUser);

                _isLoading = false;
                _alert.IsVisible = true;
                _alert.Message = "Login Successful";
                _alert.AlertType = Severity.Success;
                StateHasChanged();

                if (loggedInUser.RoleId == 3)
                    _navigationManager.NavigateTo("/admin/dashboard");
                else if (loggedInUser.RoleId == 2)
                    _navigationManager.NavigateTo("/company/dashboard");
                else
                {
                    _isLoading = false;
                    _alert.IsVisible = true;
                    _alert.Message = "Unauthorized Access";
                    _alert.AlertType = Severity.Error;
                    StateHasChanged();
                }
            }
            else
            {
                _isLoading = false;
                _alert.IsVisible = true;
                _alert.Message = "Wrong email or password";
                _alert.AlertType = Severity.Error;
                StateHasChanged();
            }
        }
        catch (FirebaseAuthException e)
        {
            var json = JsonNode.Parse(e.ResponseData);
            var code = json?["error"]?["message"]?.GetValue<string>();

            if (code != null && code == "EMAIL_NOT_FOUND")
            {
                _isLoading = false;
                _alert.IsVisible = true;
                _alert.Message = "User not found";
                _alert.AlertType = Severity.Error;
                StateHasChanged();
            }
            else if (code != null && code == "INVALID_PASSWORD")
            {
                _isLoading = false;
                _alert.IsVisible = true;
                _alert.Message = "Wrong password";
                _alert.AlertType = Severity.Error;
                StateHasChanged();
            }
            else
            {
                _isLoading = false;
                _alert.IsVisible = true;
                _alert.Message = "Unknown error";
                _alert.AlertType = Severity.Error;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            _isLoading = false;
            _alert.IsVisible = true;
            _alert.Message = "Cannot send login request";
            _alert.AlertType = Severity.Error;
            StateHasChanged();
            Console.WriteLine(e.Message);
        }
    }
}