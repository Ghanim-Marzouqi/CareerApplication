@page "/company/posted-jobs"
@inject DatabaseProvider _db
@inject IDialogService _dialogService
@inject IMapper _mapper
@inject ISnackbar _snackbar

<PageTitle>Career Application | Posted Jobs</PageTitle>

<MudText Typo="Typo.h5" Color="Color.Secondary" Class="mb-4">
    <strong>Posted Jobs</strong>
</MudText>

<div class="d-flex justify-end my-2">
    <MudButton Variant="Variant.Filled" Size="Size.Small" StartIcon="@Icons.Material.Filled.PostAdd" Color="Color.Primary" OnClick="OpenAddJobDialog">Add New Job</MudButton>
</div>
<MudTable Items="@_jobs" Dense="true" Striped="true" Filter="new Func<JobModel,bool>(FilterJobs)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Job List</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Job Category</MudTh>
        <MudTh>Applying Due Date</MudTh>
        <MudTh>View</MudTh>
        <MudTh>Edit</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Job Category">@context.JobCategory?.Name</MudTd>
        <MudTd DataLabel="Applying Due Date">@context.ApplicationDueDate</MudTd>
        <MudTd DataLabel="View">
            <MudIconButton Icon="@Icons.Material.Filled.Visibility" Color="Color.Success" Class="px-1"></MudIconButton>
        </MudTd>
        <MudTd DataLabel="Edit">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Class="px-1"></MudIconButton>
        </MudTd>
        <MudTd DataLabel="Delete">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Class="px-1"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    // Properties
    private IEnumerable<JobModel> _jobs = new List<JobModel>();
    private string _searchString = string.Empty;

    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        await GetPostedJobsAsync();
    }

    // Private Methods
    private async Task GetPostedJobsAsync()
    {
        try
        {
            Func<FirebaseObject<JobEntity>, JobEntity> selector = (job) => _mapper.Map<JobEntity>(job.Object);

            var jobs = await _db.GetAll<JobEntity>(JobEntity.Node, selector);

            if (jobs != null && jobs.Count() > 0)
            {
                _jobs = jobs.Select(job => _mapper.Map<JobModel>(job)).ToList();

                foreach (var job in _jobs)
                {
                    Func<JobCategoryEntity, bool> jobCategpryPredicate = (jc) => jc.Id == job.JobCategoryId;
                    Func<FirebaseObject<JobCategoryEntity>, JobCategoryEntity> jobCategprySelector = (jc) => _mapper.Map<JobCategoryEntity>(jc.Object);

                    var jobCategory = await _db.GetById<JobCategoryEntity>(JobCategoryEntity.Node, jobCategpryPredicate, jobCategprySelector);
                    _jobs.Where(j => j.Id == job.Id).First().JobCategory = _mapper.Map<JobCategoryModel>(jobCategory);
                }
            }

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            _snackbar.Add("Cannot fetch posted jobs", Severity.Error);
        }

    }

    private bool FilterJobs(JobModel job) => FilterFunc(job, _searchString);

    private bool FilterFunc(JobModel job, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (job.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (job.ApplicationDueDate.Contains(searchString))
            return true;
        return false;
    }

    private async void OpenAddJobDialog()
    {
        var parameters = new DialogParameters { ["Type"] = "Add" };
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true, MaxWidth = MaxWidth.Medium };
        var dialog = _dialogService.Show<AddOrEditJobDialog>("Add New Job", parameters, options);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var isModified = (bool) result.Data;

            if (isModified)
            {
                _snackbar.Add("Operation done successfully", Severity.Success);
                await GetPostedJobsAsync();
                StateHasChanged();
            }
            else
            {
                _snackbar.Add("An error has occurred", Severity.Success);
            }
        }
    }
}
