@page "/forgot-password"
@layout AuthLayout
@inject AuthProvider _auth

<PageTitle>Career Application | Forgot Password</PageTitle>

<EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    @if (_alert.IsVisible)
    {
        <MudAlert Severity="_alert.AlertType">@(_alert.Message)</MudAlert>
    }
    <MudTextField 
        T="string" 
        @bind-Value="@_model.Email" 
        For="@(() => _model.Email)" 
        Label="Email" 
        Class="my-6" 
        Variant="Variant.Outlined" />
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" Class="ml-n1 mt-3">
        @if (_isLoading)
        {
            <MudProgressCircular Color="Color.Tertiary" Size="Size.Small" Style="margin-left: 10px;" Indeterminate="true" />
        }
        else
        {
            @("Reset Password")
        }
    </MudButton>
    <MudButton Link="/" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large" FullWidth="true" Class="ml-n1 my-3">
        Go Back
    </MudButton>
</EditForm>

@code {
    // Properties
    ForgotPasswordModel _model = new();
    AlertModel _alert = new();
    bool _isLoading;

    private async void OnValidSubmit(EditContext context)
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            await _auth.SendPasswordResetEmail(_model.Email);

            _isLoading = false;
            _alert.IsVisible = true;
            _alert.Message = "Reset password request has been sent. Please check your inbox!";
            _alert.AlertType = Severity.Success;
            StateHasChanged();
        }
        catch (FirebaseAuthException e)
        {
            var json = JsonNode.Parse(e.ResponseData);
            var code = json?["error"]?["message"]?.GetValue<string>();

            if (code != null && code == "EMAIL_NOT_FOUND")
            {
                _isLoading = false;
                _alert.IsVisible = true;
                _alert.Message = "User not found";
                _alert.AlertType = Severity.Error;
                StateHasChanged();
            }
            else
            {
                _isLoading = false;
                _alert.IsVisible = true;
                _alert.Message = "Unknown error";
                _alert.AlertType = Severity.Error;
                StateHasChanged();
            }
        }
        catch (Exception e)
        {
            _isLoading = false;
            _alert.IsVisible = true;
            _alert.Message = "Cannot send password reset request";
            _alert.AlertType = Severity.Error;
            StateHasChanged();
            Console.WriteLine(e.Message);
        }
    }
}
