@inject DatabaseProvider _db
@inject IMapper _mapper
@inject ISnackbar _snackbar
@inject IBrowserStorageService _browserStorageService

<EditForm Model="@_model" OnValidSubmit="OnValidSubmit">
    <MudDialog>
        <DialogContent>
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudTextField 
                        T="string" 
                        @bind-Value="@_model.Title" 
                        For="@(() => _model.Title)" 
                        Label="Job Title"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="int" @bind-Value="_model.SectorId" Label="Job Sector" Margin="Margin.Dense" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem T="int" Value="0">- Select Job Sector -</MudSelectItem>
                        @foreach (var sector in _sectors)
                        {
                            <MudSelectItem T="int" Value="@(sector.Id)">@(sector.Name)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField 
                        T="string" 
                        @bind-Value="@_model.Description" 
                        For="@(() => _model.Description)" 
                        Label="Job Description" 
                        Lines="3"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField 
                        T="string" 
                        @bind-Value="@_model.Responsibilities" 
                        For="@(() => _model.Responsibilities)" 
                        Label="Applicant Responsibilities" 
                        Lines="3"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField 
                        T="string" 
                        @bind-Value="@_model.Qualifications" 
                        For="@(() => _model.Qualifications)" 
                        Label="Applicant Qualifications" 
                        Lines="3"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker 
                        @bind-Date="_model.ApplicationDueDate"
                        For="@(() => _model.ApplicationDueDate)"
                        Label="Applying Due Date"
                        DateFormat="dd MMM yyyy"
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined"/>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect T="int" @bind-Value="_model.JobTypeId" Label="Job Type" Margin="Margin.Dense" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem T="int" Value="0">- Select Job Type -</MudSelectItem>
                        <MudSelectItem T="int" Value="1">Full Time</MudSelectItem>
                        <MudSelectItem T="int" Value="2">Part Time</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField 
                        T="string" 
                        @bind-Value="@_model.JobLocation" 
                        For="@(() => _model.JobLocation)" 
                        Label="Job Location" 
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField 
                        T="int" 
                        @bind-Value="@_model.NumberOfVacancies" 
                        For="@(() => _model.NumberOfVacancies)" 
                        Label="Number Of Vacancies" 
                        Margin="Margin.Dense"
                        Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">
                @Type
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    // Private Methods
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = new MudDialogInstance();
    [Parameter] public JobModel Job { get; set; } = new();
    [Parameter] public string Type { get; set; } = string.Empty;
    private IEnumerable<SectorModel> _sectors = new List<SectorModel>();
    private JobFormModel _model = new();
    private AlertModel _alert = new();

    // Lifecycle Methods
    protected override async Task OnInitializedAsync()
    {
        await GetSectorsAsync();

        if (Type == "Edit" && Job != null)
        {
            _model.SectorId = Job.SectorId;
            _model.Title = Job.Title;
            _model.Description = Job.Description;
            _model.Responsibilities = Job.Responsibilities;
            _model.Qualifications = Job.Qualifications;
            _model.JobTypeId = Job.JobTypeId;
            _model.JobLocation = Job.JobLocation;
            _model.ApplicationDueDate = Job.ApplicationDueDate;
            _model.NumberOfVacancies = Job.NumberOfVacancies;
            StateHasChanged();
        }
    }

    // Private Methods
    private async Task GetSectorsAsync()
    {
        try
        {
            Func<FirebaseObject<SectorEntity>, SectorEntity> selector = (sector) => _mapper.Map<SectorEntity>(sector.Object);
            var sectors = await _db.GetAll(SectorEntity.Node, selector);
            _sectors = _mapper.Map<IEnumerable<SectorModel>>(sectors);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            _snackbar.Add("Cannot get list of job categories", Severity.Error);
        }
    }

    void Cancel() => MudDialog.Cancel();

    private async Task OnValidSubmit()
    {
        try
        {
            var user = await _browserStorageService.GetItem<UserModel>("user");

            if (user == null)
            {
                _snackbar.Add("Unknown user", Severity.Error);
                MudDialog.Close(DialogResult.Ok(false));
            }

            if (string.IsNullOrEmpty(Type))
            {
                _snackbar.Add("Unknown operation", Severity.Error);
                MudDialog.Close(DialogResult.Ok(false));
            }

            if (Type == "Add" && user != null)
            {
                var id = await _db.GenerateNewId<JobEntity>(JobEntity.Node);

                var isAdded = await _db.Add(JobEntity.Node, new JobEntity
                {
                    Id = id,
                    CompanyId = user.Id,
                    SectorId = _model.SectorId,
                    Title = _model.Title,
                    Description = _model.Description,
                    Responsibilities = _model.Responsibilities,
                    Qualifications = _model.Qualifications,
                    ApplicationDueDate = _model.ApplicationDueDate.HasValue ? _model.ApplicationDueDate.Value : DateTime.Now,
                    JobLocation = _model.JobLocation,
                    NumberOfVacancies = _model.NumberOfVacancies,
                    CreatedBy = user.Name
                });

                MudDialog.Close(DialogResult.Ok(isAdded));
            }
            else if (Type == "Edit" && user != null)
            {
                Func<JobEntity, bool> predicate = (job) => job.Key == Job.Key;
                Func<FirebaseObject<JobEntity>, JobEntity> selector = (job) => _mapper.Map<JobEntity>(job.Object);
                var isUpdated = await _db.Update(JobEntity.Node, Job.Key, predicate, selector, new JobEntity
                {
                    Id = Job.Id,
                    Key = Job.Key,
                    CompanyId = Job.CompanyId,
                    SectorId = _model.SectorId,
                    Title = _model.Title,
                    Description = _model.Description,
                    ApplicationDueDate = _model.ApplicationDueDate.HasValue ? _model.ApplicationDueDate.Value : DateTime.Now,
                    Qualifications = _model.Qualifications,
                    Responsibilities = _model.Responsibilities,
                    JobLocation = _model.JobLocation,
                    JobTypeId = _model.JobTypeId,
                    NumberOfVacancies = _model.NumberOfVacancies,
                    UpdatedBy = user.Name,
                    UpdatedAt = DateTime.Now.ToString("dd MMM yyyy")
                });

                MudDialog.Close(DialogResult.Ok(isUpdated));
            }
            else
            {
                MudDialog.Close(DialogResult.Ok(false));
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            MudDialog.Close(DialogResult.Ok(false));
        }
    }
}
